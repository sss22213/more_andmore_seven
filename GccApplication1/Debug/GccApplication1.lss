
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000076c  00000800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  00000810  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b5  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035d  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e2  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027b  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b2  00000000  00000000  00001bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  9e:	0c 94 b4 03 	jmp	0x768	; 0x768 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Choice>:
	//return object
	return four_obj;
}
void Choice(four_clock* obj)
{	
	switch(obj->choice)
  a6:	fc 01       	movw	r30, r24
  a8:	82 81       	ldd	r24, Z+2	; 0x02
  aa:	93 81       	ldd	r25, Z+3	; 0x03
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	91 05       	cpc	r25, r1
  b0:	79 f0       	breq	.+30     	; 0xd0 <Choice+0x2a>
  b2:	1c f4       	brge	.+6      	; 0xba <Choice+0x14>
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	39 f0       	breq	.+14     	; 0xc6 <Choice+0x20>
  b8:	08 95       	ret
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	91 05       	cpc	r25, r1
  be:	69 f0       	breq	.+26     	; 0xda <Choice+0x34>
  c0:	04 97       	sbiw	r24, 0x04	; 4
  c2:	81 f0       	breq	.+32     	; 0xe4 <Choice+0x3e>
  c4:	08 95       	ret
	{
		case 1:
			control |= 0xFC;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8c 6f       	ori	r24, 0xFC	; 252
  ca:	85 b9       	out	0x05, r24	; 5
			control &= 0xFD;
  cc:	29 98       	cbi	0x05, 1	; 5
		break; 
  ce:	08 95       	ret
		case 2:
			control |= 0xFA;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	8a 6f       	ori	r24, 0xFA	; 250
  d4:	85 b9       	out	0x05, r24	; 5
			control &= 0xFB;
  d6:	2a 98       	cbi	0x05, 2	; 5
		break;
  d8:	08 95       	ret
		case 3:
			control |= 0xF6;
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	86 6f       	ori	r24, 0xF6	; 246
  de:	85 b9       	out	0x05, r24	; 5
			control &= 0xF7;
  e0:	2b 98       	cbi	0x05, 3	; 5
		break;
  e2:	08 95       	ret
		case 4:
			control |= 0xEE;
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8e 6e       	ori	r24, 0xEE	; 238
  e8:	85 b9       	out	0x05, r24	; 5
			control &= 0xEF;
  ea:	2c 98       	cbi	0x05, 4	; 5
  ec:	08 95       	ret

000000ee <setSeven>:
		    Seven_out(obj->Seven[*(obj->number+i)]);
			_delay_ms(60);
		}
}
void setSeven(four_clock* obj,int m,int s)
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
  f8:	cb 01       	movw	r24, r22
  fa:	8a 01       	movw	r16, r20
	//
	obj->number[2]=m%10;
  fc:	ec 81       	ldd	r30, Y+4	; 0x04
  fe:	fd 81       	ldd	r31, Y+5	; 0x05
 100:	2a e0       	ldi	r18, 0x0A	; 10
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	b9 01       	movw	r22, r18
 106:	0e 94 3d 02 	call	0x47a	; 0x47a <__divmodhi4>
 10a:	95 83       	std	Z+5, r25	; 0x05
 10c:	84 83       	std	Z+4, r24	; 0x04
	obj->number[3]=m/10;
 10e:	ec 81       	ldd	r30, Y+4	; 0x04
 110:	fd 81       	ldd	r31, Y+5	; 0x05
 112:	77 83       	std	Z+7, r23	; 0x07
 114:	66 83       	std	Z+6, r22	; 0x06
	//
	obj->number[0]=s%10;
 116:	ec 81       	ldd	r30, Y+4	; 0x04
 118:	fd 81       	ldd	r31, Y+5	; 0x05
 11a:	c8 01       	movw	r24, r16
 11c:	b9 01       	movw	r22, r18
 11e:	0e 94 3d 02 	call	0x47a	; 0x47a <__divmodhi4>
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
	obj->number[1]=s/10;
 126:	ec 81       	ldd	r30, Y+4	; 0x04
 128:	fd 81       	ldd	r31, Y+5	; 0x05
 12a:	73 83       	std	Z+3, r23	; 0x03
 12c:	62 83       	std	Z+2, r22	; 0x02
	//
	obj->out_Seven(obj);
 12e:	ee 81       	ldd	r30, Y+6	; 0x06
 130:	ff 81       	ldd	r31, Y+7	; 0x07
 132:	ce 01       	movw	r24, r28
 134:	09 95       	icall
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <Seven_out>:
 *  Author: bohung
 */ 
#include "clock.h"
void Seven_out(unsigned char x)
{
	PORTD =((x)<<2);
 140:	98 2f       	mov	r25, r24
 142:	99 0f       	add	r25, r25
 144:	99 0f       	add	r25, r25
 146:	9b b9       	out	0x0b, r25	; 11
	PORTC =((x>>6)&0x01);
 148:	86 fb       	bst	r24, 6
 14a:	88 27       	eor	r24, r24
 14c:	80 f9       	bld	r24, 0
 14e:	88 b9       	out	0x08, r24	; 8
 150:	08 95       	ret

00000152 <outSeven>:
			break;
		default:break;
	};
}
void outSeven(four_clock* obj)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	8c 01       	movw	r16, r24
 160:	e1 2c       	mov	r14, r1
 162:	f1 2c       	mov	r15, r1
	//Send val to Seven
		for(int i=0;i<4;i++)
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
		{
			obj->choice=i+1;
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	f8 01       	movw	r30, r16
 16c:	d3 83       	std	Z+3, r29	; 0x03
 16e:	c2 83       	std	Z+2, r28	; 0x02
			Choice(obj);
 170:	c8 01       	movw	r24, r16
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <Choice>
		    Seven_out(obj->Seven[*(obj->number+i)]);
 176:	f8 01       	movw	r30, r16
 178:	a4 81       	ldd	r26, Z+4	; 0x04
 17a:	b5 81       	ldd	r27, Z+5	; 0x05
 17c:	ae 0d       	add	r26, r14
 17e:	bf 1d       	adc	r27, r15
 180:	20 81       	ld	r18, Z
 182:	31 81       	ldd	r19, Z+1	; 0x01
 184:	8d 91       	ld	r24, X+
 186:	9c 91       	ld	r25, X
 188:	f9 01       	movw	r30, r18
 18a:	e8 0f       	add	r30, r24
 18c:	f9 1f       	adc	r31, r25
 18e:	80 81       	ld	r24, Z
 190:	0e 94 a0 00 	call	0x140	; 0x140 <Seven_out>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	87 e9       	ldi	r24, 0x97	; 151
 196:	9a e3       	ldi	r25, 0x3A	; 58
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <outSeven+0x46>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <outSeven+0x4c>
 19e:	00 00       	nop
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	e9 0e       	add	r14, r25
 1a4:	f1 1c       	adc	r15, r1
	};
}
void outSeven(four_clock* obj)
{
	//Send val to Seven
		for(int i=0;i<4;i++)
 1a6:	c4 30       	cpi	r28, 0x04	; 4
 1a8:	d1 05       	cpc	r29, r1
 1aa:	f1 f6       	brne	.-68     	; 0x168 <outSeven+0x16>
			obj->choice=i+1;
			Choice(obj);
		    Seven_out(obj->Seven[*(obj->number+i)]);
			_delay_ms(60);
		}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <system_Init>:
	PORTD =((x)<<2);
	PORTC =((x>>6)&0x01);
}
void system_Init()
{
	Seven_Init;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	84 b9       	out	0x04, r24	; 4
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	87 b9       	out	0x07, r24	; 7
	OCR1A = 0x3D08;
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	9d e3       	ldi	r25, 0x3D	; 61
 1c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	//OCR1A = 0x0100;
	TCCR1B |= (1 << WGM12);
 1d0:	e1 e8       	ldi	r30, 0x81	; 129
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	80 83       	st	Z, r24
	// Mode 4, CTC on OCR1A
	TIMSK1 |= (1 << OCIE1A);
 1da:	af e6       	ldi	r26, 0x6F	; 111
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	8c 91       	ld	r24, X
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	8c 93       	st	X, r24
	//Set interrupt on compare match
	TCCR1B |= (1 << CS12) | (1 << CS10);
 1e4:	80 81       	ld	r24, Z
 1e6:	85 60       	ori	r24, 0x05	; 5
 1e8:	80 83       	st	Z, r24
	// set prescaler to 1024 and start the timer
	sei();
 1ea:	78 94       	sei
 1ec:	08 95       	ret

000001ee <new_four_clock>:
}
four_clock* new_four_clock()
{
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	2a 97       	sbiw	r28, 0x0a	; 10
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
	//Seven Table
	unsigned char Seven_table[10]=
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	e6 e0       	ldi	r30, 0x06	; 6
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	de 01       	movw	r26, r28
 20e:	11 96       	adiw	r26, 0x01	; 1
 210:	01 90       	ld	r0, Z+
 212:	0d 92       	st	X+, r0
 214:	8a 95       	dec	r24
 216:	e1 f7       	brne	.-8      	; 0x210 <new_four_clock+0x22>
		0x27,
		0x7F,
		0x67,
	};
	//init object
	four_clock* four_obj=(four_clock*)malloc(sizeof(four_clock));
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 87 02 	call	0x50e	; 0x50e <malloc>
 220:	8c 01       	movw	r16, r24
	#if Debug_mode
		assert(four_obj!=NULL);
	#endif
	//Seven Table
	four_obj->Seven=(unsigned char*)malloc(10*sizeof(unsigned char));
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 87 02 	call	0x50e	; 0x50e <malloc>
 22a:	d8 01       	movw	r26, r16
 22c:	8d 93       	st	X+, r24
 22e:	9c 93       	st	X, r25
 230:	de 01       	movw	r26, r28
 232:	11 96       	adiw	r26, 0x01	; 1
	#if Debug_mode
		assert(four_obj->Seven!=NULL);
	#endif
	for(int i=0;i<10;i++)*((four_obj->Seven)+i)=*(Seven_table+i);
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	8d 91       	ld	r24, X+
 23a:	f8 01       	movw	r30, r16
 23c:	40 81       	ld	r20, Z
 23e:	51 81       	ldd	r21, Z+1	; 0x01
 240:	fa 01       	movw	r30, r20
 242:	e2 0f       	add	r30, r18
 244:	f3 1f       	adc	r31, r19
 246:	80 83       	st	Z, r24
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	2a 30       	cpi	r18, 0x0A	; 10
 24e:	31 05       	cpc	r19, r1
 250:	99 f7       	brne	.-26     	; 0x238 <new_four_clock+0x4a>
	
	//Seven_choice
	four_obj->choice=0;
 252:	d8 01       	movw	r26, r16
 254:	13 96       	adiw	r26, 0x03	; 3
 256:	1c 92       	st	X, r1
 258:	1e 92       	st	-X, r1
 25a:	12 97       	sbiw	r26, 0x02	; 2
	//Seven_number
	four_obj->number=(int*)malloc(4*sizeof(int));
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 87 02 	call	0x50e	; 0x50e <malloc>
 264:	f8 01       	movw	r30, r16
 266:	95 83       	std	Z+5, r25	; 0x05
 268:	84 83       	std	Z+4, r24	; 0x04
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
	for(int i=0;i<4;i++)*((four_obj->number)+i)=0;
 26e:	d8 01       	movw	r26, r16
 270:	14 96       	adiw	r26, 0x04	; 4
 272:	ed 91       	ld	r30, X+
 274:	fc 91       	ld	r31, X
 276:	15 97       	sbiw	r26, 0x05	; 5
 278:	e8 0f       	add	r30, r24
 27a:	f9 1f       	adc	r31, r25
 27c:	11 82       	std	Z+1, r1	; 0x01
 27e:	10 82       	st	Z, r1
 280:	02 96       	adiw	r24, 0x02	; 2
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	91 05       	cpc	r25, r1
 286:	99 f7       	brne	.-26     	; 0x26e <new_four_clock+0x80>
	//member function
	four_obj->Seven_Choice=Choice;
 288:	83 e5       	ldi	r24, 0x53	; 83
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	19 96       	adiw	r26, 0x09	; 9
 28e:	9c 93       	st	X, r25
 290:	8e 93       	st	-X, r24
 292:	18 97       	sbiw	r26, 0x08	; 8
	four_obj->out_Seven=outSeven;
 294:	89 ea       	ldi	r24, 0xA9	; 169
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	17 96       	adiw	r26, 0x07	; 7
 29a:	9c 93       	st	X, r25
 29c:	8e 93       	st	-X, r24
 29e:	16 97       	sbiw	r26, 0x06	; 6
	four_obj->set_Seven=setSeven;
 2a0:	87 e7       	ldi	r24, 0x77	; 119
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	1b 96       	adiw	r26, 0x0b	; 11
 2a6:	9c 93       	st	X, r25
 2a8:	8e 93       	st	-X, r24
 2aa:	1a 97       	sbiw	r26, 0x0a	; 10
	timer=0;
 2ac:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 2b0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 2b4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end+0x2>
 2b8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x3>
	//return object
	return four_obj;
}
 2bc:	c8 01       	movw	r24, r16
 2be:	2a 96       	adiw	r28, 0x0a	; 10
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <modify>:

#include "clock.h"
#include "reg.h"

void modify(four_clock * obj)
{
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	7c 01       	movw	r14, r24
	obj->set_Seven(obj,0,0);
 2ee:	dc 01       	movw	r26, r24
 2f0:	1a 96       	adiw	r26, 0x0a	; 10
 2f2:	ed 91       	ld	r30, X+
 2f4:	fc 91       	ld	r31, X
 2f6:	1b 97       	sbiw	r26, 0x0b	; 11
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	09 95       	icall
	int m=0;
	int s=0;
	int m_flag=0;
	int s_flag=0;
 302:	a1 2c       	mov	r10, r1
 304:	b1 2c       	mov	r11, r1
void modify(four_clock * obj)
{
	obj->set_Seven(obj,0,0);
	int m=0;
	int s=0;
	int m_flag=0;
 306:	c1 2c       	mov	r12, r1
 308:	d1 2c       	mov	r13, r1

void modify(four_clock * obj)
{
	obj->set_Seven(obj,0,0);
	int m=0;
	int s=0;
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	d0 e0       	ldi	r29, 0x00	; 0
#include "reg.h"

void modify(four_clock * obj)
{
	obj->set_Seven(obj,0,0);
	int m=0;
 30e:	00 e0       	ldi	r16, 0x00	; 0
 310:	10 e0       	ldi	r17, 0x00	; 0
		obj->set_Seven(obj,m,s);
		//
		if(PINC==0x08 && m_flag>5)
		{
			m++;
			m_flag=0;
 312:	81 2c       	mov	r8, r1
 314:	91 2c       	mov	r9, r1
	obj->set_Seven(obj,0,0);
	int m=0;
	int s=0;
	int m_flag=0;
	int s_flag=0;
	while(PINC!=0x04)
 316:	36 c0       	rjmp	.+108    	; 0x384 <modify+0xb0>
	{
		obj->set_Seven(obj,m,s);
 318:	d7 01       	movw	r26, r14
 31a:	1a 96       	adiw	r26, 0x0a	; 10
 31c:	ed 91       	ld	r30, X+
 31e:	fc 91       	ld	r31, X
 320:	1b 97       	sbiw	r26, 0x0b	; 11
 322:	ae 01       	movw	r20, r28
 324:	b8 01       	movw	r22, r16
 326:	c7 01       	movw	r24, r14
 328:	09 95       	icall
		//
		if(PINC==0x08 && m_flag>5)
 32a:	86 b1       	in	r24, 0x06	; 6
 32c:	88 30       	cpi	r24, 0x08	; 8
 32e:	49 f4       	brne	.+18     	; 0x342 <modify+0x6e>
 330:	b6 e0       	ldi	r27, 0x06	; 6
 332:	cb 16       	cp	r12, r27
 334:	d1 04       	cpc	r13, r1
 336:	2c f0       	brlt	.+10     	; 0x342 <modify+0x6e>
		{
			m++;
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
			m_flag=0;
 33c:	c8 2c       	mov	r12, r8
 33e:	d9 2c       	mov	r13, r9
 340:	06 c0       	rjmp	.+12     	; 0x34e <modify+0x7a>
		}
		else if(PINC==0x08)m_flag++;
 342:	86 b1       	in	r24, 0x06	; 6
 344:	88 30       	cpi	r24, 0x08	; 8
 346:	19 f4       	brne	.+6      	; 0x34e <modify+0x7a>
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	c8 1a       	sub	r12, r24
 34c:	d8 0a       	sbc	r13, r24
		
		if(PINC==0x10 && s_flag>5)
 34e:	86 b1       	in	r24, 0x06	; 6
 350:	80 31       	cpi	r24, 0x10	; 16
 352:	41 f4       	brne	.+16     	; 0x364 <modify+0x90>
 354:	a6 e0       	ldi	r26, 0x06	; 6
 356:	aa 16       	cp	r10, r26
 358:	b1 04       	cpc	r11, r1
 35a:	24 f0       	brlt	.+8      	; 0x364 <modify+0x90>
		{
			s++;
 35c:	21 96       	adiw	r28, 0x01	; 1
			s_flag=0;
 35e:	a8 2c       	mov	r10, r8
 360:	b9 2c       	mov	r11, r9
 362:	06 c0       	rjmp	.+12     	; 0x370 <modify+0x9c>
		}
		else if(PINC==0x10)s_flag++;
 364:	86 b1       	in	r24, 0x06	; 6
 366:	80 31       	cpi	r24, 0x10	; 16
 368:	19 f4       	brne	.+6      	; 0x370 <modify+0x9c>
 36a:	bf ef       	ldi	r27, 0xFF	; 255
 36c:	ab 1a       	sub	r10, r27
 36e:	bb 0a       	sbc	r11, r27
		s=s>59?0:s;
 370:	cc 33       	cpi	r28, 0x3C	; 60
 372:	d1 05       	cpc	r29, r1
 374:	14 f0       	brlt	.+4      	; 0x37a <modify+0xa6>
 376:	c8 2d       	mov	r28, r8
 378:	d9 2d       	mov	r29, r9
		m=m>11?0:m;
 37a:	0c 30       	cpi	r16, 0x0C	; 12
 37c:	11 05       	cpc	r17, r1
 37e:	14 f0       	brlt	.+4      	; 0x384 <modify+0xb0>
 380:	08 2d       	mov	r16, r8
 382:	19 2d       	mov	r17, r9
	obj->set_Seven(obj,0,0);
	int m=0;
	int s=0;
	int m_flag=0;
	int s_flag=0;
	while(PINC!=0x04)
 384:	86 b1       	in	r24, 0x06	; 6
 386:	84 30       	cpi	r24, 0x04	; 4
 388:	39 f6       	brne	.-114    	; 0x318 <modify+0x44>
		}
		else if(PINC==0x10)s_flag++;
		s=s>59?0:s;
		m=m>11?0:m;
	}
	timer=m*60+s;
 38a:	8c e3       	ldi	r24, 0x3C	; 60
 38c:	80 9f       	mul	r24, r16
 38e:	a0 01       	movw	r20, r0
 390:	81 9f       	mul	r24, r17
 392:	50 0d       	add	r21, r0
 394:	11 24       	eor	r1, r1
 396:	4c 0f       	add	r20, r28
 398:	5d 1f       	adc	r21, r29
 39a:	05 2e       	mov	r0, r21
 39c:	00 0c       	add	r0, r0
 39e:	66 0b       	sbc	r22, r22
 3a0:	77 0b       	sbc	r23, r23
 3a2:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <__data_end>
 3a6:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <__data_end+0x1>
 3aa:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <__data_end+0x2>
 3ae:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <__data_end+0x3>
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	cf 90       	pop	r12
 3c2:	bf 90       	pop	r11
 3c4:	af 90       	pop	r10
 3c6:	9f 90       	pop	r9
 3c8:	8f 90       	pop	r8
 3ca:	08 95       	ret

000003cc <main>:
int main(void)
{
	four_clock *myclock=new_four_clock();
 3cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <new_four_clock>
 3d0:	ec 01       	movw	r28, r24
	system_Init();
 3d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <system_Init>
	int m=0,s=0;
    while (1) 
    {
		m=timer/60;
		s=timer%60;
 3d6:	0f 2e       	mov	r0, r31
 3d8:	fc e3       	ldi	r31, 0x3C	; 60
 3da:	cf 2e       	mov	r12, r31
 3dc:	d1 2c       	mov	r13, r1
 3de:	e1 2c       	mov	r14, r1
 3e0:	f1 2c       	mov	r15, r1
 3e2:	f0 2d       	mov	r31, r0
	four_clock *myclock=new_four_clock();
	system_Init();
	int m=0,s=0;
    while (1) 
    {
		m=timer/60;
 3e4:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 3e8:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 3ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 3f0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
		s=timer%60;
 3f4:	a7 01       	movw	r20, r14
 3f6:	96 01       	movw	r18, r12
 3f8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__udivmodsi4>
 3fc:	89 01       	movw	r16, r18
 3fe:	9a 01       	movw	r18, r20
		myclock->set_Seven(myclock,m,s);
 400:	ea 85       	ldd	r30, Y+10	; 0x0a
 402:	fb 85       	ldd	r31, Y+11	; 0x0b
 404:	ab 01       	movw	r20, r22
 406:	b8 01       	movw	r22, r16
 408:	ce 01       	movw	r24, r28
 40a:	09 95       	icall
		if(PINC==0x02)
 40c:	86 b1       	in	r24, 0x06	; 6
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	49 f7       	brne	.-46     	; 0x3e4 <main+0x18>
		{
			modify(myclock);
 412:	ce 01       	movw	r24, r28
 414:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <modify>
 418:	e5 cf       	rjmp	.-54     	; 0x3e4 <main+0x18>

0000041a <__vector_11>:
		}
    }
}
ISR(TIMER1_COMPA_vect)
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	2f 93       	push	r18
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
	timer=((timer>720)?0:timer);
 42e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 432:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 436:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_end+0x2>
 43a:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_end+0x3>
 43e:	81 3d       	cpi	r24, 0xD1	; 209
 440:	22 e0       	ldi	r18, 0x02	; 2
 442:	92 07       	cpc	r25, r18
 444:	a1 05       	cpc	r26, r1
 446:	b1 05       	cpc	r27, r1
 448:	18 f0       	brcs	.+6      	; 0x450 <__vector_11+0x36>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	dc 01       	movw	r26, r24
	timer++;
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	a1 1d       	adc	r26, r1
 454:	b1 1d       	adc	r27, r1
 456:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 45a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 45e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
 462:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
}
 466:	bf 91       	pop	r27
 468:	af 91       	pop	r26
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__divmodhi4>:
 47a:	97 fb       	bst	r25, 7
 47c:	07 2e       	mov	r0, r23
 47e:	16 f4       	brtc	.+4      	; 0x484 <__divmodhi4+0xa>
 480:	00 94       	com	r0
 482:	07 d0       	rcall	.+14     	; 0x492 <__divmodhi4_neg1>
 484:	77 fd       	sbrc	r23, 7
 486:	09 d0       	rcall	.+18     	; 0x49a <__divmodhi4_neg2>
 488:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__udivmodhi4>
 48c:	07 fc       	sbrc	r0, 7
 48e:	05 d0       	rcall	.+10     	; 0x49a <__divmodhi4_neg2>
 490:	3e f4       	brtc	.+14     	; 0x4a0 <__divmodhi4_exit>

00000492 <__divmodhi4_neg1>:
 492:	90 95       	com	r25
 494:	81 95       	neg	r24
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	08 95       	ret

0000049a <__divmodhi4_neg2>:
 49a:	70 95       	com	r23
 49c:	61 95       	neg	r22
 49e:	7f 4f       	sbci	r23, 0xFF	; 255

000004a0 <__divmodhi4_exit>:
 4a0:	08 95       	ret

000004a2 <__udivmodsi4>:
 4a2:	a1 e2       	ldi	r26, 0x21	; 33
 4a4:	1a 2e       	mov	r1, r26
 4a6:	aa 1b       	sub	r26, r26
 4a8:	bb 1b       	sub	r27, r27
 4aa:	fd 01       	movw	r30, r26
 4ac:	0d c0       	rjmp	.+26     	; 0x4c8 <__udivmodsi4_ep>

000004ae <__udivmodsi4_loop>:
 4ae:	aa 1f       	adc	r26, r26
 4b0:	bb 1f       	adc	r27, r27
 4b2:	ee 1f       	adc	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	a2 17       	cp	r26, r18
 4b8:	b3 07       	cpc	r27, r19
 4ba:	e4 07       	cpc	r30, r20
 4bc:	f5 07       	cpc	r31, r21
 4be:	20 f0       	brcs	.+8      	; 0x4c8 <__udivmodsi4_ep>
 4c0:	a2 1b       	sub	r26, r18
 4c2:	b3 0b       	sbc	r27, r19
 4c4:	e4 0b       	sbc	r30, r20
 4c6:	f5 0b       	sbc	r31, r21

000004c8 <__udivmodsi4_ep>:
 4c8:	66 1f       	adc	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	88 1f       	adc	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	1a 94       	dec	r1
 4d2:	69 f7       	brne	.-38     	; 0x4ae <__udivmodsi4_loop>
 4d4:	60 95       	com	r22
 4d6:	70 95       	com	r23
 4d8:	80 95       	com	r24
 4da:	90 95       	com	r25
 4dc:	9b 01       	movw	r18, r22
 4de:	ac 01       	movw	r20, r24
 4e0:	bd 01       	movw	r22, r26
 4e2:	cf 01       	movw	r24, r30
 4e4:	08 95       	ret

000004e6 <__udivmodhi4>:
 4e6:	aa 1b       	sub	r26, r26
 4e8:	bb 1b       	sub	r27, r27
 4ea:	51 e1       	ldi	r21, 0x11	; 17
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <__udivmodhi4_ep>

000004ee <__udivmodhi4_loop>:
 4ee:	aa 1f       	adc	r26, r26
 4f0:	bb 1f       	adc	r27, r27
 4f2:	a6 17       	cp	r26, r22
 4f4:	b7 07       	cpc	r27, r23
 4f6:	10 f0       	brcs	.+4      	; 0x4fc <__udivmodhi4_ep>
 4f8:	a6 1b       	sub	r26, r22
 4fa:	b7 0b       	sbc	r27, r23

000004fc <__udivmodhi4_ep>:
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	5a 95       	dec	r21
 502:	a9 f7       	brne	.-22     	; 0x4ee <__udivmodhi4_loop>
 504:	80 95       	com	r24
 506:	90 95       	com	r25
 508:	bc 01       	movw	r22, r24
 50a:	cd 01       	movw	r24, r26
 50c:	08 95       	ret

0000050e <malloc>:
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	91 05       	cpc	r25, r1
 516:	10 f4       	brcc	.+4      	; 0x51c <malloc+0xe>
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__flp>
 520:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__flp+0x1>
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	c0 e0       	ldi	r28, 0x00	; 0
 52a:	d0 e0       	ldi	r29, 0x00	; 0
 52c:	30 97       	sbiw	r30, 0x00	; 0
 52e:	11 f1       	breq	.+68     	; 0x574 <malloc+0x66>
 530:	40 81       	ld	r20, Z
 532:	51 81       	ldd	r21, Z+1	; 0x01
 534:	48 17       	cp	r20, r24
 536:	59 07       	cpc	r21, r25
 538:	c0 f0       	brcs	.+48     	; 0x56a <malloc+0x5c>
 53a:	48 17       	cp	r20, r24
 53c:	59 07       	cpc	r21, r25
 53e:	61 f4       	brne	.+24     	; 0x558 <malloc+0x4a>
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	20 97       	sbiw	r28, 0x00	; 0
 546:	19 f0       	breq	.+6      	; 0x54e <malloc+0x40>
 548:	9b 83       	std	Y+3, r25	; 0x03
 54a:	8a 83       	std	Y+2, r24	; 0x02
 54c:	2b c0       	rjmp	.+86     	; 0x5a4 <malloc+0x96>
 54e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__flp+0x1>
 552:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__flp>
 556:	26 c0       	rjmp	.+76     	; 0x5a4 <malloc+0x96>
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	19 f0       	breq	.+6      	; 0x564 <malloc+0x56>
 55e:	42 17       	cp	r20, r18
 560:	53 07       	cpc	r21, r19
 562:	18 f4       	brcc	.+6      	; 0x56a <malloc+0x5c>
 564:	9a 01       	movw	r18, r20
 566:	be 01       	movw	r22, r28
 568:	df 01       	movw	r26, r30
 56a:	ef 01       	movw	r28, r30
 56c:	02 80       	ldd	r0, Z+2	; 0x02
 56e:	f3 81       	ldd	r31, Z+3	; 0x03
 570:	e0 2d       	mov	r30, r0
 572:	dc cf       	rjmp	.-72     	; 0x52c <malloc+0x1e>
 574:	21 15       	cp	r18, r1
 576:	31 05       	cpc	r19, r1
 578:	09 f1       	breq	.+66     	; 0x5bc <malloc+0xae>
 57a:	28 1b       	sub	r18, r24
 57c:	39 0b       	sbc	r19, r25
 57e:	24 30       	cpi	r18, 0x04	; 4
 580:	31 05       	cpc	r19, r1
 582:	90 f4       	brcc	.+36     	; 0x5a8 <malloc+0x9a>
 584:	12 96       	adiw	r26, 0x02	; 2
 586:	8d 91       	ld	r24, X+
 588:	9c 91       	ld	r25, X
 58a:	13 97       	sbiw	r26, 0x03	; 3
 58c:	61 15       	cp	r22, r1
 58e:	71 05       	cpc	r23, r1
 590:	21 f0       	breq	.+8      	; 0x59a <malloc+0x8c>
 592:	fb 01       	movw	r30, r22
 594:	93 83       	std	Z+3, r25	; 0x03
 596:	82 83       	std	Z+2, r24	; 0x02
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <malloc+0x94>
 59a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__flp+0x1>
 59e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__flp>
 5a2:	fd 01       	movw	r30, r26
 5a4:	32 96       	adiw	r30, 0x02	; 2
 5a6:	44 c0       	rjmp	.+136    	; 0x630 <malloc+0x122>
 5a8:	fd 01       	movw	r30, r26
 5aa:	e2 0f       	add	r30, r18
 5ac:	f3 1f       	adc	r31, r19
 5ae:	81 93       	st	Z+, r24
 5b0:	91 93       	st	Z+, r25
 5b2:	22 50       	subi	r18, 0x02	; 2
 5b4:	31 09       	sbc	r19, r1
 5b6:	2d 93       	st	X+, r18
 5b8:	3c 93       	st	X, r19
 5ba:	3a c0       	rjmp	.+116    	; 0x630 <malloc+0x122>
 5bc:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 5c0:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 5c4:	23 2b       	or	r18, r19
 5c6:	41 f4       	brne	.+16     	; 0x5d8 <malloc+0xca>
 5c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 5d0:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__brkval+0x1>
 5d4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__brkval>
 5d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5e0:	21 15       	cp	r18, r1
 5e2:	31 05       	cpc	r19, r1
 5e4:	41 f4       	brne	.+16     	; 0x5f6 <malloc+0xe8>
 5e6:	2d b7       	in	r18, 0x3d	; 61
 5e8:	3e b7       	in	r19, 0x3e	; 62
 5ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5f2:	24 1b       	sub	r18, r20
 5f4:	35 0b       	sbc	r19, r21
 5f6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__brkval>
 5fa:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__brkval+0x1>
 5fe:	e2 17       	cp	r30, r18
 600:	f3 07       	cpc	r31, r19
 602:	a0 f4       	brcc	.+40     	; 0x62c <malloc+0x11e>
 604:	2e 1b       	sub	r18, r30
 606:	3f 0b       	sbc	r19, r31
 608:	28 17       	cp	r18, r24
 60a:	39 07       	cpc	r19, r25
 60c:	78 f0       	brcs	.+30     	; 0x62c <malloc+0x11e>
 60e:	ac 01       	movw	r20, r24
 610:	4e 5f       	subi	r20, 0xFE	; 254
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	24 17       	cp	r18, r20
 616:	35 07       	cpc	r19, r21
 618:	48 f0       	brcs	.+18     	; 0x62c <malloc+0x11e>
 61a:	4e 0f       	add	r20, r30
 61c:	5f 1f       	adc	r21, r31
 61e:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <__brkval+0x1>
 622:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <__brkval>
 626:	81 93       	st	Z+, r24
 628:	91 93       	st	Z+, r25
 62a:	02 c0       	rjmp	.+4      	; 0x630 <malloc+0x122>
 62c:	e0 e0       	ldi	r30, 0x00	; 0
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	cf 01       	movw	r24, r30
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <free>:
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	09 f4       	brne	.+2      	; 0x646 <free+0xe>
 644:	8c c0       	rjmp	.+280    	; 0x75e <free+0x126>
 646:	fc 01       	movw	r30, r24
 648:	32 97       	sbiw	r30, 0x02	; 2
 64a:	13 82       	std	Z+3, r1	; 0x03
 64c:	12 82       	std	Z+2, r1	; 0x02
 64e:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <__flp>
 652:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <__flp+0x1>
 656:	01 15       	cp	r16, r1
 658:	11 05       	cpc	r17, r1
 65a:	81 f4       	brne	.+32     	; 0x67c <free+0x44>
 65c:	20 81       	ld	r18, Z
 65e:	31 81       	ldd	r19, Z+1	; 0x01
 660:	82 0f       	add	r24, r18
 662:	93 1f       	adc	r25, r19
 664:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 668:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 66c:	28 17       	cp	r18, r24
 66e:	39 07       	cpc	r19, r25
 670:	79 f5       	brne	.+94     	; 0x6d0 <free+0x98>
 672:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__brkval+0x1>
 676:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__brkval>
 67a:	71 c0       	rjmp	.+226    	; 0x75e <free+0x126>
 67c:	d8 01       	movw	r26, r16
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	ae 17       	cp	r26, r30
 684:	bf 07       	cpc	r27, r31
 686:	50 f4       	brcc	.+20     	; 0x69c <free+0x64>
 688:	12 96       	adiw	r26, 0x02	; 2
 68a:	2d 91       	ld	r18, X+
 68c:	3c 91       	ld	r19, X
 68e:	13 97       	sbiw	r26, 0x03	; 3
 690:	ad 01       	movw	r20, r26
 692:	21 15       	cp	r18, r1
 694:	31 05       	cpc	r19, r1
 696:	09 f1       	breq	.+66     	; 0x6da <free+0xa2>
 698:	d9 01       	movw	r26, r18
 69a:	f3 cf       	rjmp	.-26     	; 0x682 <free+0x4a>
 69c:	9d 01       	movw	r18, r26
 69e:	da 01       	movw	r26, r20
 6a0:	33 83       	std	Z+3, r19	; 0x03
 6a2:	22 83       	std	Z+2, r18	; 0x02
 6a4:	60 81       	ld	r22, Z
 6a6:	71 81       	ldd	r23, Z+1	; 0x01
 6a8:	86 0f       	add	r24, r22
 6aa:	97 1f       	adc	r25, r23
 6ac:	82 17       	cp	r24, r18
 6ae:	93 07       	cpc	r25, r19
 6b0:	69 f4       	brne	.+26     	; 0x6cc <free+0x94>
 6b2:	ec 01       	movw	r28, r24
 6b4:	28 81       	ld	r18, Y
 6b6:	39 81       	ldd	r19, Y+1	; 0x01
 6b8:	26 0f       	add	r18, r22
 6ba:	37 1f       	adc	r19, r23
 6bc:	2e 5f       	subi	r18, 0xFE	; 254
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	31 83       	std	Z+1, r19	; 0x01
 6c2:	20 83       	st	Z, r18
 6c4:	8a 81       	ldd	r24, Y+2	; 0x02
 6c6:	9b 81       	ldd	r25, Y+3	; 0x03
 6c8:	93 83       	std	Z+3, r25	; 0x03
 6ca:	82 83       	std	Z+2, r24	; 0x02
 6cc:	45 2b       	or	r20, r21
 6ce:	29 f4       	brne	.+10     	; 0x6da <free+0xa2>
 6d0:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__flp+0x1>
 6d4:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__flp>
 6d8:	42 c0       	rjmp	.+132    	; 0x75e <free+0x126>
 6da:	13 96       	adiw	r26, 0x03	; 3
 6dc:	fc 93       	st	X, r31
 6de:	ee 93       	st	-X, r30
 6e0:	12 97       	sbiw	r26, 0x02	; 2
 6e2:	ed 01       	movw	r28, r26
 6e4:	49 91       	ld	r20, Y+
 6e6:	59 91       	ld	r21, Y+
 6e8:	9e 01       	movw	r18, r28
 6ea:	24 0f       	add	r18, r20
 6ec:	35 1f       	adc	r19, r21
 6ee:	e2 17       	cp	r30, r18
 6f0:	f3 07       	cpc	r31, r19
 6f2:	71 f4       	brne	.+28     	; 0x710 <free+0xd8>
 6f4:	80 81       	ld	r24, Z
 6f6:	91 81       	ldd	r25, Z+1	; 0x01
 6f8:	84 0f       	add	r24, r20
 6fa:	95 1f       	adc	r25, r21
 6fc:	02 96       	adiw	r24, 0x02	; 2
 6fe:	11 96       	adiw	r26, 0x01	; 1
 700:	9c 93       	st	X, r25
 702:	8e 93       	st	-X, r24
 704:	82 81       	ldd	r24, Z+2	; 0x02
 706:	93 81       	ldd	r25, Z+3	; 0x03
 708:	13 96       	adiw	r26, 0x03	; 3
 70a:	9c 93       	st	X, r25
 70c:	8e 93       	st	-X, r24
 70e:	12 97       	sbiw	r26, 0x02	; 2
 710:	e0 e0       	ldi	r30, 0x00	; 0
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	d8 01       	movw	r26, r16
 716:	12 96       	adiw	r26, 0x02	; 2
 718:	8d 91       	ld	r24, X+
 71a:	9c 91       	ld	r25, X
 71c:	13 97       	sbiw	r26, 0x03	; 3
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	19 f0       	breq	.+6      	; 0x728 <free+0xf0>
 722:	f8 01       	movw	r30, r16
 724:	8c 01       	movw	r16, r24
 726:	f6 cf       	rjmp	.-20     	; 0x714 <free+0xdc>
 728:	8d 91       	ld	r24, X+
 72a:	9c 91       	ld	r25, X
 72c:	98 01       	movw	r18, r16
 72e:	2e 5f       	subi	r18, 0xFE	; 254
 730:	3f 4f       	sbci	r19, 0xFF	; 255
 732:	82 0f       	add	r24, r18
 734:	93 1f       	adc	r25, r19
 736:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 73a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 73e:	28 17       	cp	r18, r24
 740:	39 07       	cpc	r19, r25
 742:	69 f4       	brne	.+26     	; 0x75e <free+0x126>
 744:	30 97       	sbiw	r30, 0x00	; 0
 746:	29 f4       	brne	.+10     	; 0x752 <free+0x11a>
 748:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__flp+0x1>
 74c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp>
 750:	02 c0       	rjmp	.+4      	; 0x756 <free+0x11e>
 752:	13 82       	std	Z+3, r1	; 0x03
 754:	12 82       	std	Z+2, r1	; 0x02
 756:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <__brkval+0x1>
 75a:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <__brkval>
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	08 95       	ret

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
